plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.16.3'
    id "de.undercouch.download" version "4.0.0"
}

group 'ru.zeburek'
version '4.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    implementation 'ch.qos.logback:logback-core:1.3.0-alpha5'
    implementation 'de.jensd:fontawesomefx-fontawesome:4.7.0-9.1.2'
    implementation 'org.apache.httpcomponents:httpcomponents-core:4.4.13'
    implementation 'org.apache.httpcomponents:httpcomponents-client:4.5.10'
    implementation 'org.apache.logging.log4j:log4j:2.13.0'
    implementation 'org.slf4j:slf4j-api:1.8.0-beta4'
    implementation 'org.slf4j:jcl-over-slf4j:1.7.30'
    implementation 'org.netbeans.external:org-apache-commons-lang:RELEASE112'
    implementation 'net.java.dev.jna:jna-platform:5.5.0'
    implementation 'com.brsanthu:google-analytics-java:2.0.0'
    implementation 'de.huxhorn.lilith:de.huxhorn.lilith.3rdparty.junique:1.0.4'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'
}

def versionPropsFile = file('$buildDir/../src/main/resources/ru/zeburek/zerohelper/version.properties')

if (versionPropsFile.canRead()) {
    System.out.println("Version file: ${versionPropsFile}")
    Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def major = versionProps['VERSION_MAJOR'].toInteger()
    def minor = versionProps['VERSION_MINOR'].toInteger()
    def code = versionProps['VERSION_PATCH'].toInteger() + 1

    versionProps['VERSION_PATCH']=code.toString()
    versionProps.store(versionPropsFile.newWriter(), null)

    def newVer = major + "." + minor + "." + code
    System.out.println("New version: ${newVer}")
    project.setVersion(newVer)
} else {
    throw new GradleException("Could not read version.properties!")
}

mainClassName = "ru.zeburek.zerohelper.ZeroHelper"

javafx {
    version = "13"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.web' ]
}

ext.os = org.gradle.internal.os.OperatingSystem.current()

jlink {
    addExtraDependencies("javafx")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'zerohelper'
    }
    mergedModule {
        requires 'org.slf4j'
        requires 'java.logging'
    }
    jpackage {
        if (Boolean.getBoolean('download.jpackage')) {
            jpackageHome = downloadJPackage()
        }
        skipInstaller = false
        installerOptions = [
                '--copyright', 'Copyrigth 2016-2020 Parviz Khavari'
        ]
        installerType = System.getenv("INSTALLER_TYPE") // we will pass this from the command line (example: -PinstallerType=msi)
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/resources/ru/zeburek/zerohelper/icon.ico']
            installerOptions += [
                    '--win-per-user-install', '--win-dir-chooser',
                    '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/resources/ru/zeburek/zerohelper/icon.icns']
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/resources/ru/zeburek/zerohelper/icon.png']
            installerOptions += [
                    '--linux-menu-group', 'Tools',
                    '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                    '--linux-deb-maintainer', 'me@parviz.pw'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                    '--linux-rpm-license-type', 'ASL 2.0'
            ]
        }
    }
}

// #### The code below is needed only if you use the downloadJPackage() method to install the jpackage tool ####
// Code copied from build.gradle in https://github.com/beryx/fxgl-sliding-puzzle/

/** @return  [url, extension, directory] */
String[] getJPackageCoordinates() {
    def jpackageBaseUrl = 'https://s3-us-west-2.amazonaws.com/static.msgilligan.com/jpackage'
    def jpackageVersionString = 'openjdk-14-jpackage%2B1-49'

    if(os.macOsX) return [
            "${jpackageBaseUrl}/${jpackageVersionString}_osx-x64_bin.tar.gz",
            'tar.gz',
            'jdk-14.jdk/Contents/Home'
    ]
    if(os.windows) return [
            "${jpackageBaseUrl}/${jpackageVersionString}_windows-x64_bin.zip",
            'zip',
            'jdk-14'
    ]
    return [
            "${jpackageBaseUrl}/${jpackageVersionString}_linux-x64_bin.tar.gz",
            'tar.gz',
            'jdk-14'
    ]
}

String downloadJPackage() {
    def (url, extension, directory) = getJPackageCoordinates()
    def downloadDir = "$buildDir/download"
    tasks.jpackageImage.doFirst {
        def execExt = os.windows ? '.exe' : ''
        if(!file("$downloadDir/$directory/bin/jpackage$execExt").file) {
            def jdkArchivePath = "$downloadDir/jdk-jpackage.$extension"
            download {
                src url
                dest jdkArchivePath
                overwrite false
            }
            copy {
                from ((extension == 'tar.gz') ? tarTree(resources.gzip(jdkArchivePath)) : zipTree(jdkArchivePath))
                into downloadDir
            }
        }
    }
    return "$downloadDir/$directory"
}
